# example for logalert in alertwebhook
pipelines:
  - name: local
    sources:
      - type: file
        name: demo
        paths:
          - /Users/user/Downloads/test/temp.txt
        fields:
          topic: "loggie"
        addonMeta: true
        multi:
          active: true
          pattern: '^(\d{4})-(\d{2})-(\d{2})'
          maxLines: 100
    interceptors:
      - type: logAlert
        matcher:
          contains: ["error","ERROR"]
          regexp: ['.*WARN.*']
        ignore: ['.*INFO.*']
        sendOnlyMatched: true
        advanced:
          enabled: true
          mode: [ "regexp" ]
          rules:
            - regexp: '(?<date>.*?) (?<time>[\S|\\.]+)  (?<status>[\S|\\.]+) (?<u>.*?) --- (?<thread>\[.*?\]) (?<pkg>.*) : (?<message>(.|\n|\t)*)'
              matchType: "any"
              groups:
                - key: status
                  operator: "eq"
                  value: WARN
                - key: status
                  operator: "eq"
                  value: ERROR

    sink:
      type: alertWebhook
      addr: http://localhost:8080/loggie
      headers:
        api: test1
      groupKey: ${_meta.pipelineName}-${_meta.sourceName}
      alertSendingThreshold: 10
      sendLoggieError: true
      sendLoggieErrorAtOnce: true
      template: |
        {
          "alerts":
            [
            {{$first := true}}
            {{range .Alerts}}
            {{if $first}}{{$first = false}}{{else}},{{end}}
            {
              "labels": {
                "logconfig": "{{.fields.logconfig}}",
                "filename": {{.state.filename}}
              },
              "annotations": {
                "message": "{{range .body}}{{pruneEscape .}}\n{{end}}",
                "reason": "{{pruneEscape .reason}}"
              },
              "startsAt": "{{._meta.timestamp}}",
              "endsAt": "{{._meta.timestamp}}"
            }
            {{end}}
            ],
            {{$first := true}}
            {{range .Alerts}}
            {{if $first}}{{$first = false}}{{else}}
            {{end}}
            {{end}}
        }
