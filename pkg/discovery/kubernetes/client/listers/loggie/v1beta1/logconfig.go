/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/loggie-io/loggie/pkg/discovery/kubernetes/apis/loggie/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// LogConfigLister helps list LogConfigs.
// All objects returned here must be treated as read-only.
type LogConfigLister interface {
	// List lists all LogConfigs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.LogConfig, err error)
	// LogConfigs returns an object that can list and get LogConfigs.
	LogConfigs(namespace string) LogConfigNamespaceLister
	LogConfigListerExpansion
}

// logConfigLister implements the LogConfigLister interface.
type logConfigLister struct {
	indexer cache.Indexer
}

// NewLogConfigLister returns a new LogConfigLister.
func NewLogConfigLister(indexer cache.Indexer) LogConfigLister {
	return &logConfigLister{indexer: indexer}
}

// List lists all LogConfigs in the indexer.
func (s *logConfigLister) List(selector labels.Selector) (ret []*v1beta1.LogConfig, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.LogConfig))
	})
	return ret, err
}

// LogConfigs returns an object that can list and get LogConfigs.
func (s *logConfigLister) LogConfigs(namespace string) LogConfigNamespaceLister {
	return logConfigNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LogConfigNamespaceLister helps list and get LogConfigs.
// All objects returned here must be treated as read-only.
type LogConfigNamespaceLister interface {
	// List lists all LogConfigs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.LogConfig, err error)
	// Get retrieves the LogConfig from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1beta1.LogConfig, error)
	LogConfigNamespaceListerExpansion
}

// logConfigNamespaceLister implements the LogConfigNamespaceLister
// interface.
type logConfigNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all LogConfigs in the indexer for a given namespace.
func (s logConfigNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.LogConfig, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.LogConfig))
	})
	return ret, err
}

// Get retrieves the LogConfig from the indexer for a given namespace and name.
func (s logConfigNamespaceLister) Get(name string) (*v1beta1.LogConfig, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("logconfig"), name)
	}
	return obj.(*v1beta1.LogConfig), nil
}
